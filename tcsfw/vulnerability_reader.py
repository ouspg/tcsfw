import csv
import pathlib
from typing import cast, List

from tcsfw.components import Software
from tcsfw.entity import Entity
from tcsfw.event_interface import PropertyEvent, EventInterface
from tcsfw.model import IoTSystem, NetworkNode
from tcsfw.property import PropertyVerdict, Properties, PropertyKey
from tcsfw.tools import ComponentCheckTool
from tcsfw.traffic import EvidenceSource, Evidence
from tcsfw.verdict import Verdict


class VulnerabilityReader(ComponentCheckTool):
    """Read vulnerabilities"""
    def __init__(self, system: IoTSystem):
        super().__init__("vulnz", system)
        self.tool.name = "Vulnerability scan"

    def _filter_component(self, node: NetworkNode) -> bool:
        """Filter checked entities"""
        return isinstance(None, Software)

    def _check_entity(self, node: NetworkNode, data_file: pathlib.Path, interface: EventInterface,
                      source: EvidenceSource):
        software = cast(Software, node)
        evidence = Evidence(source)

        with data_file.open() as f:
            reader = csv.reader(f, delimiter=",")
            properties = set()
            for n, row in enumerate(reader):
                if n == 0:
                    continue  # title
                name = row[0].strip()
                # ver = row[1].strip()
                cve = row[3].strip().lower()
                key = PropertyVerdict(self.tool_label, name, cve)
                properties.add(key)
                ev = PropertyEvent(evidence, software, key.value(Verdict.FAIL))
                interface.property_update(ev)

            ev = PropertyEvent(evidence, software, Properties.VULNERABILITIES.value(properties))
            interface.property_update(ev)

    def _entity_coverage(self, entity: Entity) -> List[PropertyKey]:
        if isinstance(entity, Software):
            return [Properties.VULNERABILITIES]
        return []
